// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rgb_mux,hls_ip_2014_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.740000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module rgb_mux (
        ap_clk,
        ap_rst_n,
        video_in_stream_TDATA,
        video_in_stream_TVALID,
        video_in_stream_TREADY,
        video_in_stream_TUSER,
        video_in_stream_TLAST,
        video_out_stream_TDATA,
        video_out_stream_TVALID,
        video_out_stream_TREADY,
        video_out_stream_TUSER,
        video_out_stream_TLAST,
        mux_V
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm0_0 = 1'b0;
parameter    ap_ST_st2_fsm1_1 = 1'b0;
parameter    ap_ST_st3_fsm2_1 = 1'b0;
parameter    ap_ST_st0_fsm1_0 = 1'b1;
parameter    ap_ST_st0_fsm2_0 = 1'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst_n;
input  [23:0] video_in_stream_TDATA;
input   video_in_stream_TVALID;
output   video_in_stream_TREADY;
input   video_in_stream_TUSER;
input   video_in_stream_TLAST;
output  [23:0] video_out_stream_TDATA;
output   video_out_stream_TVALID;
input   video_out_stream_TREADY;
output   video_out_stream_TUSER;
output   video_out_stream_TLAST;
input  [1:0] mux_V;

reg video_in_stream_TREADY;
reg video_out_stream_TVALID;
reg   [23:0] video_in_stream_data_V_tmp_reg_213;
reg   [0:0] ap_CS_fsm0 = 1'b0;
reg   [0:0] ap_CS_fsm1 = 1'b1;
reg   [0:0] ap_CS_fsm2 = 1'b1;
reg    ap_sig_ioackin_video_out_stream_TREADY;
reg   [23:0] ap_reg_ppstg_video_in_stream_data_V_tmp_reg_213_pp0_it1;
reg   [0:0] video_in_stream_tuser_tmp_reg_219;
reg   [0:0] ap_reg_ppstg_video_in_stream_tuser_tmp_reg_219_pp0_it1;
reg   [0:0] video_in_stream_tlast_tmp_reg_224;
reg   [0:0] ap_reg_ppstg_video_in_stream_tlast_tmp_reg_224_pp0_it1;
wire   [7:0] R_fu_106_p1;
reg   [7:0] R_reg_229;
reg   [7:0] ap_reg_ppstg_R_reg_229_pp0_it1;
reg   [7:0] G_reg_235;
reg   [7:0] ap_reg_ppstg_G_reg_235_pp0_it1;
reg   [7:0] B_reg_241;
reg   [7:0] ap_reg_ppstg_B_reg_241_pp0_it1;
wire   [0:0] tmp_2_fu_130_p2;
wire   [0:0] tmp_9_fu_136_p2;
wire   [0:0] tmp_5_fu_142_p2;
wire   [0:0] sel_tmp6_demorgan_fu_148_p2;
wire   [0:0] sel_tmp2_fu_159_p2;
wire   [0:0] sel_tmp7_fu_169_p2;
wire   [0:0] empty_read_fu_70_p4_1;
wire   [0:0] empty_read_fu_70_p4_2;
reg    ap_reg_ioackin_video_out_stream_TREADY = 1'b0;
wire   [0:0] sel_tmp1_fu_154_p2;
wire   [0:0] sel_tmp6_fu_164_p2;
wire   [23:0] p_1_fu_181_p4;
wire   [23:0] p_s_fu_174_p4;
wire   [0:0] or_cond_fu_194_p2;
wire   [23:0] newSel_fu_188_p3;
wire   [23:0] newSel9_fu_198_p3;
reg   [0:0] ap_NS_fsm0;
reg   [0:0] ap_NS_fsm1;
reg   [0:0] ap_NS_fsm2;




/// the current state (ap_CS_fsm0) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm0
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm0 <= ap_ST_st1_fsm0_0;
    end else begin
        ap_CS_fsm0 <= ap_NS_fsm0;
    end
end

/// the current state (ap_CS_fsm1) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm1
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm1 <= ap_ST_st0_fsm1_0;
    end else begin
        ap_CS_fsm1 <= ap_NS_fsm1;
    end
end

/// the current state (ap_CS_fsm2) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm2
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm2 <= ap_ST_st0_fsm2_0;
    end else begin
        ap_CS_fsm2 <= ap_NS_fsm2;
    end
end

/// ap_reg_ioackin_video_out_stream_TREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_video_out_stream_TREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_video_out_stream_TREADY <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st3_fsm2_1 == ap_CS_fsm2) & ~(ap_const_logic_0 == ap_sig_ioackin_video_out_stream_TREADY))) begin
            ap_reg_ioackin_video_out_stream_TREADY <= ap_const_logic_0;
        end else if (((ap_ST_st3_fsm2_1 == ap_CS_fsm2) & (ap_const_logic_1 == video_out_stream_TREADY))) begin
            ap_reg_ioackin_video_out_stream_TREADY <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm0_0 == ap_CS_fsm0) & ~((video_in_stream_TVALID == ap_const_logic_0) | ((ap_const_logic_0 == ap_sig_ioackin_video_out_stream_TREADY) & (ap_ST_st3_fsm2_1 == ap_CS_fsm2))))) begin
        B_reg_241 <= {{video_in_stream_TDATA[ap_const_lv32_17 : ap_const_lv32_10]}};
        G_reg_235 <= {{video_in_stream_TDATA[ap_const_lv32_F : ap_const_lv32_8]}};
        R_reg_229 <= R_fu_106_p1;
        video_in_stream_data_V_tmp_reg_213 <= video_in_stream_TDATA;
        video_in_stream_tlast_tmp_reg_224 <= empty_read_fu_70_p4_2;
        video_in_stream_tuser_tmp_reg_219 <= empty_read_fu_70_p4_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm1_1 == ap_CS_fsm1) & ~((ap_const_logic_0 == ap_sig_ioackin_video_out_stream_TREADY) & (ap_ST_st3_fsm2_1 == ap_CS_fsm2)))) begin
        ap_reg_ppstg_B_reg_241_pp0_it1 <= B_reg_241;
        ap_reg_ppstg_G_reg_235_pp0_it1 <= G_reg_235;
        ap_reg_ppstg_R_reg_229_pp0_it1 <= R_reg_229;
        ap_reg_ppstg_video_in_stream_data_V_tmp_reg_213_pp0_it1 <= video_in_stream_data_V_tmp_reg_213;
        ap_reg_ppstg_video_in_stream_tlast_tmp_reg_224_pp0_it1 <= video_in_stream_tlast_tmp_reg_224;
        ap_reg_ppstg_video_in_stream_tuser_tmp_reg_219_pp0_it1 <= video_in_stream_tuser_tmp_reg_219;
    end
end

/// ap_sig_ioackin_video_out_stream_TREADY assign process. ///
always @ (video_out_stream_TREADY or ap_reg_ioackin_video_out_stream_TREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_video_out_stream_TREADY)) begin
        ap_sig_ioackin_video_out_stream_TREADY = video_out_stream_TREADY;
    end else begin
        ap_sig_ioackin_video_out_stream_TREADY = ap_const_logic_1;
    end
end

/// video_in_stream_TREADY assign process. ///
always @ (video_in_stream_TVALID or ap_CS_fsm0 or ap_CS_fsm2 or ap_sig_ioackin_video_out_stream_TREADY)
begin
    if (((ap_ST_st1_fsm0_0 == ap_CS_fsm0) & ~((video_in_stream_TVALID == ap_const_logic_0) | ((ap_const_logic_0 == ap_sig_ioackin_video_out_stream_TREADY) & (ap_ST_st3_fsm2_1 == ap_CS_fsm2))))) begin
        video_in_stream_TREADY = ap_const_logic_1;
    end else begin
        video_in_stream_TREADY = ap_const_logic_0;
    end
end

/// video_out_stream_TVALID assign process. ///
always @ (ap_CS_fsm2 or ap_reg_ioackin_video_out_stream_TREADY)
begin
    if (((ap_ST_st3_fsm2_1 == ap_CS_fsm2) & (ap_const_logic_0 == ap_reg_ioackin_video_out_stream_TREADY))) begin
        video_out_stream_TVALID = ap_const_logic_1;
    end else begin
        video_out_stream_TVALID = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm2) of the state machine. ///
always @ (ap_CS_fsm1 or ap_CS_fsm2 or ap_sig_ioackin_video_out_stream_TREADY)
begin
    case (ap_CS_fsm2)
        ap_ST_st3_fsm2_1 : 
        begin
            if (((ap_ST_st2_fsm1_1 == ap_CS_fsm1) & ~(ap_const_logic_0 == ap_sig_ioackin_video_out_stream_TREADY))) begin
                ap_NS_fsm2 = ap_ST_st3_fsm2_1;
            end else if ((~(ap_const_logic_0 == ap_sig_ioackin_video_out_stream_TREADY) & ~(ap_ST_st2_fsm1_1 == ap_CS_fsm1))) begin
                ap_NS_fsm2 = ap_ST_st0_fsm2_0;
            end else begin
                ap_NS_fsm2 = ap_ST_st3_fsm2_1;
            end
        end
        ap_ST_st0_fsm2_0 : 
        begin
            if (((ap_ST_st2_fsm1_1 == ap_CS_fsm1) & ~((ap_const_logic_0 == ap_sig_ioackin_video_out_stream_TREADY) & (ap_ST_st3_fsm2_1 == ap_CS_fsm2)))) begin
                ap_NS_fsm2 = ap_ST_st3_fsm2_1;
            end else begin
                ap_NS_fsm2 = ap_ST_st0_fsm2_0;
            end
        end
        default : 
        begin
            ap_NS_fsm2 = 'bx;
        end
    endcase
end

/// the next state (ap_NS_fsm1) of the state machine. ///
always @ (video_in_stream_TVALID or ap_CS_fsm0 or ap_CS_fsm1 or ap_CS_fsm2 or ap_sig_ioackin_video_out_stream_TREADY)
begin
    case (ap_CS_fsm1)
        ap_ST_st2_fsm1_1 : 
        begin
            if (((ap_ST_st1_fsm0_0 == ap_CS_fsm0) & ~((ap_const_logic_0 == ap_sig_ioackin_video_out_stream_TREADY) & (ap_ST_st3_fsm2_1 == ap_CS_fsm2)) & ~(video_in_stream_TVALID == ap_const_logic_0))) begin
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            end else if ((~((ap_const_logic_0 == ap_sig_ioackin_video_out_stream_TREADY) & (ap_ST_st3_fsm2_1 == ap_CS_fsm2)) & (~(ap_ST_st1_fsm0_0 == ap_CS_fsm0) | ((ap_ST_st1_fsm0_0 == ap_CS_fsm0) & (video_in_stream_TVALID == ap_const_logic_0))))) begin
                ap_NS_fsm1 = ap_ST_st0_fsm1_0;
            end else begin
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            end
        end
        ap_ST_st0_fsm1_0 : 
        begin
            if (((ap_ST_st1_fsm0_0 == ap_CS_fsm0) & ~((video_in_stream_TVALID == ap_const_logic_0) | ((ap_const_logic_0 == ap_sig_ioackin_video_out_stream_TREADY) & (ap_ST_st3_fsm2_1 == ap_CS_fsm2))))) begin
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            end else begin
                ap_NS_fsm1 = ap_ST_st0_fsm1_0;
            end
        end
        default : 
        begin
            ap_NS_fsm1 = 'bx;
        end
    endcase
end

/// the next state (ap_NS_fsm0) of the state machine. ///
always @ (video_in_stream_TVALID or ap_CS_fsm0 or ap_CS_fsm2 or ap_sig_ioackin_video_out_stream_TREADY)
begin
    case (ap_CS_fsm0)
        ap_ST_st1_fsm0_0 : 
        begin
            ap_NS_fsm0 = ap_ST_st1_fsm0_0;
        end
        default : 
        begin
            ap_NS_fsm0 = 'bx;
        end
    endcase
end

assign R_fu_106_p1 = video_in_stream_TDATA[7:0];
assign empty_read_fu_70_p4_1 = video_in_stream_TUSER;
assign empty_read_fu_70_p4_2 = video_in_stream_TLAST;
assign newSel9_fu_198_p3 = ((tmp_2_fu_130_p2)? p_s_fu_174_p4: ap_reg_ppstg_video_in_stream_data_V_tmp_reg_213_pp0_it1);
assign newSel_fu_188_p3 = ((sel_tmp7_fu_169_p2)? ap_reg_ppstg_video_in_stream_data_V_tmp_reg_213_pp0_it1: p_1_fu_181_p4);
assign or_cond_fu_194_p2 = (sel_tmp7_fu_169_p2 | sel_tmp2_fu_159_p2);
assign p_1_fu_181_p4 = {{{{ap_reg_ppstg_G_reg_235_pp0_it1}, {ap_reg_ppstg_B_reg_241_pp0_it1}}}, {ap_reg_ppstg_R_reg_229_pp0_it1}};
assign p_s_fu_174_p4 = {{{{ap_reg_ppstg_B_reg_241_pp0_it1}, {ap_reg_ppstg_R_reg_229_pp0_it1}}}, {ap_reg_ppstg_G_reg_235_pp0_it1}};
assign sel_tmp1_fu_154_p2 = (tmp_2_fu_130_p2 ^ ap_const_lv1_1);
assign sel_tmp2_fu_159_p2 = (tmp_9_fu_136_p2 & sel_tmp1_fu_154_p2);
assign sel_tmp6_demorgan_fu_148_p2 = (tmp_2_fu_130_p2 | tmp_9_fu_136_p2);
assign sel_tmp6_fu_164_p2 = (sel_tmp6_demorgan_fu_148_p2 ^ ap_const_lv1_1);
assign sel_tmp7_fu_169_p2 = (tmp_5_fu_142_p2 & sel_tmp6_fu_164_p2);
assign tmp_2_fu_130_p2 = (mux_V == ap_const_lv2_1? 1'b1: 1'b0);
assign tmp_5_fu_142_p2 = (mux_V == ap_const_lv2_3? 1'b1: 1'b0);
assign tmp_9_fu_136_p2 = (mux_V == ap_const_lv2_2? 1'b1: 1'b0);
assign video_out_stream_TDATA = ((or_cond_fu_194_p2)? newSel_fu_188_p3: newSel9_fu_198_p3);
assign video_out_stream_TLAST = ap_reg_ppstg_video_in_stream_tlast_tmp_reg_224_pp0_it1;
assign video_out_stream_TUSER = ap_reg_ppstg_video_in_stream_tuser_tmp_reg_219_pp0_it1;


endmodule //rgb_mux

