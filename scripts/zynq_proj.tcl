#
# Vivado (TM) v2013.4.0 (64-bit)
#
# zynq_proj.tcl: Tcl script for re-creating project 'zynq'
#
# Generated by Vivado on Fri Nov 01 10:32:54 -0600 2013
# IP Build 196702 on Thu Oct 31 17:14:51 MDT 2013
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (zynq_proj.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' variable setting below at the start of the script)
#
#    "C:/Xilinx/Vivado/2013.4/examples/Vivado_Tutorial/Projects/zynq/zynq.srcs/sources_1/bd/zynq_1/zynq_1.bd"
#    "C:/Xilinx/Vivado/2013.4/examples/Vivado_Tutorial/Projects/zynq/zynq.srcs/sources_1/bd/zynq_1/hdl/zynq_1_wrapper.vhd"
#    "C:/Xilinx/Vivado/2013.4/examples/Vivado_Tutorial/Projects/zynq/zynq.srcs/sim_1/new/tb.v"
#    "C:/Xilinx/Vivado/2013.4/examples/Vivado_Tutorial/Projects/zynq/zynq.srcs/sim_1/imports/2013.3/tb_behav.wcfg"
#
# 3. The following remote source files that were added to the original project:-
#
#    <none>
#
#*****************************************************************************************

# get the directory where this script resides
set thisDir [file dirname [info script]]
# change the current working directory to here
cd $thisDir/../project

# Set the original project directory path for adding/importing sources in the new project. (Path
# needs to be modified for each release)
set orig_proj_dir "./zynq"
set proj_dir "./zynq"

# remove the old project directory if it exists - always start in a clean dir
if [file exists $proj_dir] {
   file delete -force $proj_dir
}
# same for the bd dir
if [file exists $proj_dir/../zynq_1] {
   file delete -force $proj_dir/../zynq_1
}

# Create project
create_project zynq $thisDir/project/zynq -part xc7z020clg484-1

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [get_projects zynq]
set_property "board_part" "xilinx.com:zc702:part0:1.0" $obj
set_property "simulator_language" "Mixed" $obj
set_property "target_language" "Verilog" $obj

puts "INFO: Project created:zynq"

add_files -norecurse $thisDir/../hdl/top/top.v
add_files -norecurse $thisDir/../ip/axi_chip2chip_0/axi_chip2chip_0.xci
update_compile_order -fileset sources_1
set_property SOURCE_SET sources_1 [get_filesets sim_1]
add_files -fileset sim_1 -norecurse $thisDir/../tb/hdl_zynq/tb.v
update_compile_order -fileset sim_1

# Source the bd.tcl file to create the bd
source zynq_bd.tcl
validate_bd_design
save_bd_design

# Close the IPI design without any layout information
#close_bd_design zynq_1

# Apply UI file
#  set folder [pwd]
#  set ui_file "bd_cf78a2d4.ui"
#  set ui_file_path [glob $folder/$ui_file]
#  set project_name [current_project]
#  set project_dir  [get_property DIRECTORY [current_project]]

#  if { [file exists "$ui_file_path"] == 1 } { 
#     set str_ui_folder $proj_dir/../zynq_1/ui
#     puts "Copying <$ui_file_path> to <$str_ui_folder/$ui_file>..."
#     file copy -force $ui_file_path "$str_ui_folder/$ui_file"
#  } else {
#     puts "ERROR: Unable to find the .ui file <$ui_file>!"
#  }

# Re-open IPI design with layout and comments
#set bd_file  $proj_dir/../zynq_1/zynq_1.bd
#open_bd_design $bd_file

# Re-generate layout
#regenerate_bd_layout

# Validate bd
#validate_bd_design

#save_bd_design

# Generate Target
generate_target all [get_files */zynq_1.bd]

# Make the top level wrapper. Add the wrapper file and update compile order.
#make_wrapper -import -files [get_files */zynq_1.bd] -top
#add_files -norecurse $proj_dir/../zynq_1/hdl/zynq_1_wrapper.vhd
#update_compile_order -fileset sources_1
#update_compile_order -fileset sim_1

# Add the top level testbench

# Synthesize, place/route, and generate bitstream
launch_runs impl_1 -to_step write_bitstream

# Launch Simulation
launch_xsim -simset sim_1 -mode behavioral -noclean_dir
run 2500 ns

# Wait on run impl_1
wait_on_run impl_1

# Open implemented design
open_run impl_1

# Report timing to make sure all constraints have been matched.
report_timing_summary -delay_type min_max -report_unconstrained -check_timing_verbose -max_paths 10 -input_pins -name timing_1

# Export hardware to SDK
#file mkdir ./zynq/zynq.sdk
#file copy -force ./zynq/zynq.runs/impl_1/zynq_1_wrapper.sysdef ./zynq/zynq.sdk/zynq_1_wrapper.hdf

# Launch SDK
#launch_sdk -workspace ./zynq/zynq.sdk -hwspec ./zynq/zynq.sdk/zynq_1_wrapper.hdf

#puts "Project successfully exported to SDK. You are now ready to create your application in SDK."

